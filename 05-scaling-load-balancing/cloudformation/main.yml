AWSTemplateFormatVersion: '2010-09-09'

Description: 'AWS CloudFormation Template to setup an Auto Scaling Group with Load Balancer'

Resources:
  # VPC
  MyVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Name
          Value: MyVPC

  # Subnets
  MySubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '10.0.1.0/24'
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: MySubnet1

  MySubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '10.0.2.0/24'
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: MySubnet2

  # Security Group for Load Balancer
  MyLoadBalancerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Enable HTTP access'
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: '80'
          ToPort: '80'
          CidrIp: '0.0.0.0/0'
      Tags:
        - Key: Name
          Value: MyLoadBalancerSecurityGroup

  # Security Group for EC2 Instances
  MyInstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Enable HTTP access from Load Balancer'
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: !Ref MyLoadBalancerSecurityGroup
      Tags:
        - Key: Name
          Value: MyInstanceSecurityGroup

  # Application Load Balancer
  MyLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Subnets:
        - !Ref MySubnet1
        - !Ref MySubnet2
      SecurityGroups:
        - !Ref MyLoadBalancerSecurityGroup
      Scheme: 'internet-facing'
      LoadBalancerAttributes:
        - Key: 'deletion_protection.enabled'
          Value: 'false'
      Tags:
        - Key: Name
          Value: MyLoadBalancer

  # Target Group
  MyTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      VpcId: !Ref MyVPC
      Port: 80
      Protocol: HTTP
      TargetType: instance
      HealthCheckProtocol: HTTP
      HealthCheckPort: '80'
      HealthCheckPath: '/'
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      Matcher:
        HttpCode: '200-299'
      Tags:
        - Key: Name
          Value: MyTargetGroup

  # Listener
  MyListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref MyTargetGroup
      LoadBalancerArn: !Ref MyLoadBalancer
      Port: 80
      Protocol: HTTP

  # Launch Configuration
  MyLaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: 'ami-0b995c42184e99f98' # Replace with a valid AMI ID
      InstanceType: 't2.micro'
      SecurityGroups:
        - !Ref MyInstanceSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum install -y httpd
          service httpd start
          chkconfig httpd on

  # Auto Scaling Group
  MyAutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      VPCZoneIdentifier:
        - !Ref MySubnet1
        - !Ref MySubnet2
      LaunchConfigurationName: !Ref MyLaunchConfiguration
      MinSize: '1'
      MaxSize: '3'
      DesiredCapacity: '1'
      TargetGroupARNs:
        - !Ref MyTargetGroup
      HealthCheckType: 'EC2'
      HealthCheckGracePeriod: '300'
      Tags:
        - Key: Name
          Value: MyAutoScalingGroup
          PropagateAtLaunch: 'true'


# NOTE: Template validated
# aws cloudformation validate-template --template-body file://main.yml
#Description: AWS CloudFormation Template to setup an Auto Scaling Group with Load
#  Balancer
#Parameters: []